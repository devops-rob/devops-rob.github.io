<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HashiCorp Vault on DevOps Rob</title><link>https://devops-rob.github.io/posts/vault/</link><description>Recent content in HashiCorp Vault on DevOps Rob</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 06 Aug 2019 08:06:25 +0600</lastBuildDate><atom:link href="https://devops-rob.github.io/posts/vault/index.xml" rel="self" type="application/rss+xml"/><item><title>Architecting Vault - Part 4</title><link>https://devops-rob.github.io/posts/vault/architecting-vault-part-4/</link><pubDate>Tue, 06 Aug 2019 08:06:25 +0600</pubDate><guid>https://devops-rob.github.io/posts/vault/architecting-vault-part-4/</guid><description>In this blog edition, we’ll look at what Vault’s seal status means, different ways to unseal vault servers and when we can expect to find vault in a sealed state.
Sealing is Vault protective mechanism that prevents you secrets from being accessible if the Vault server is ever compromised in any way. When you first deploy a Vault server, it is in a sealed state, which means, there aren’t many actions you can perform on the server.</description></item><item><title>Architecting Vault - Part 3</title><link>https://devops-rob.github.io/posts/vault/architecting-vault-part-3/</link><pubDate>Mon, 29 Jul 2019 08:06:25 +0600</pubDate><guid>https://devops-rob.github.io/posts/vault/architecting-vault-part-3/</guid><description>So far in this blog series, we have covered hosting options for Vault deployments and also explored the different options available for Storage backends and some of the considerations needed when making your design decision.
This post will look at the auth methods that are available for you to enable in your Vault deployment and how to make the right decision as to which option to choose for your use case.</description></item><item><title>Architecting Vault - Part 2</title><link>https://devops-rob.github.io/posts/vault/architecting-vault-part-2/</link><pubDate>Sun, 21 Jul 2019 08:06:25 +0600</pubDate><guid>https://devops-rob.github.io/posts/vault/architecting-vault-part-2/</guid><description>In the previous blog post, i discussed hosting options for Hashicorp Vault and things to consider when making decisions about the platform to deploy your production Vault Cluster on to. This post will focus on the next architectural decision that you need to make when designing your vault cluster.
Which backend do i want to use for my Vault Cluster? Firstly, let’s define what a backend is in the context of Vault and what capabilities a backend can enable for our cluster.</description></item><item><title>Architecting Vault - Part 1</title><link>https://devops-rob.github.io/posts/vault/architecting-vault-part-1/</link><pubDate>Sun, 14 Jul 2019 08:06:25 +0600</pubDate><guid>https://devops-rob.github.io/posts/vault/architecting-vault-part-1/</guid><description>In the modern world, applications and the infrastructure they run on are moving to a multi-cloud, multi-platform and multi-service approach. This means that applications are being separated into service components that make up an application stack and run on a number of different platforms to deliver the business value, for example, some services may run in a container which is orchestrated by Kubernetes or Nomad, some may be run on Virtual Machines and the others run as Serverless functions using services like Lambda or FunctionApp.</description></item></channel></rss>